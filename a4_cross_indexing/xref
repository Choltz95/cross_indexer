#!/usr/bin/env python

from subprocess import call
from collections import defaultdict
import sys
import os
import errno
import re
import datetime

log = "dwarf_log.txt"
bin = ""
statements = []
vars = defaultdict(list)
global_vars = defaultdict(list)
sub_programs = defaultdict(list)
symbol_table = {}
current_level = -1
scope_tree = []

name_stack = []
id_to_name = {}
all_vtypes = {}
vtypes = {}
enums = {}
all_vars = {}
all_local_vars = []
local_vars = []
anons = 0

 # Nasty, but appears to parse the lines we need
dwarf_header_regex = re.compile(r'<(?P<level>\d+)><(?P<statement_id>[0-9+]+)><(?P<type>\w+)>')
dwarf_key_val_regex = re.compile('\s*(?P<keyname>\w+)<(?P<val>[^>]*)>')

def create_directory(path):
    try:
        os.makedirs(path)
    except OSError, e:
        if e.errno != 17:
            print("file not created")

# feed line to input of the form <level><stmtid><type><key,val>
# ie <1><0x94><DW_TAG_variable> DW_AT_name<x> DW_AT_decl_file<0x00000001 /u/choltz2/school/csc_254/a4_cross_indexing/hello_world.c>
#    DW_AT_decl_line<0x00000005> DW_AT_type<<0x0000005b>> DW_AT_external<yes(1)>
#    DW_AT_location<len 0x0009: 033810600000000000: DW_OP_addr 0x00601038>

def get_line(line):
    return 0

# process single dwarf statement
def parse_stmt(type, level, data, statement_id):
    new_level = int(level)
    if new_level > current_level:
        current_level = new_level
        name_stack.append([])
    elif new_level < current_level:
        name_stack = name_stack[:new_level+1]
        current_level = new_level

    name_stack[-1] = [type, statement_id]

    try:
        parent_kind, parent_name = name_stack[-2]
    except IndexError:
        parent_kind, parent_name = (None, None)

    if type == 'DW_TAG_variable' and level == '1':
        if 'DW_AT_location' in data:
            split = data['DW_AT_location'].split()
            if len(split) > 1:
                loc = int(split[1], 0)
                vars[data['DW_AT_name']] = [loc, data['DW_AT_type']]

# gets stuff from debug table
def get_debug_table():
    dt_info_rgx = re.compile(r'(0x[0-9a-fA-F]+) .* ([0-9]+),')
    flag = False
    table = []
    t={}
    f = open("debug_table", "w")
    call("~cs254/bin/dwarfdump -l " + bin, shell=True, stdout = f)
    f.close()
    with open('debug_table') as f:
        for line in f.readlines():
            if "<pc>" in line:
                flag = True
            if flag == True:
                table.append(line)
    for row in table:
        match_dt_info = dt_info_rgx.search(row)
        if match_dt_info is not None:
            t[match_dt_info.group(1)] = match_dt_info.group(2)
    return t

def get_line(hex, dict):
    for key,value in dict.iteritems():
        if hex in key:
            return dict[key]

def get_prev_line(hex,dict,l,h):
    low = l
    k = sorted(dict.keys())
    print k
    for key,value in dict.iteritems():
        if hex in key:
            temp=dict[key]
            i = k.index(key)
    while l > h:
        i = i-1
        h = dict[k[i]]
    return h


#<2><0x103><DW_TAG_lexical_block> DW_AT_low_pc<0x0040065e> DW_AT_high_pc<<offset-from-lowpc>64>
def get_info(stmt):
    info_rgx = re.compile(r'<(-?[0-9]+)><(.*)><DW_TAG_(.*?)> .*DW_AT_name<(.*?)>')
# add decl_line, DW_AT_location
    loc_rgx = re.compile(r'DW_AT_decl_file<.*/(.*?)>')
    decl_lin_rgx = re.compile(r'DW_AT_decl_line<(.*?)>')
    low_pc_rgx = re.compile(r'DW_AT_low_pc<(.*?)>')
    high_pc_rgx = re.compile(r'DW_AT_high_pc<<offset-from-lowpc>(.*?)>')
    lexical_block_rgx = re.compile(r'<(-?[0-9]+)><(.*)><DW_TAG_lexical_block> DW_AT_low_pc<(.*?)> DW_AT_high_pc<<offset-from-lowpc>(.*?)>')
    match = info_rgx.search(stmt)
    match_loc = loc_rgx.search(stmt)
    match_decl = decl_lin_rgx.search(stmt)
    match_lb = lexical_block_rgx.search(stmt)

    match_low_pc = low_pc_rgx.search(stmt)
    match_high_pc = high_pc_rgx.search(stmt)
    fname = ""
    name = ""
    decl_line_hex = 0

    if match_lb is not None:
        #print 'matched lexical_block'
        lvl_lb = match_lb.group(1)
        id_lb = match_lb.group(2)
        tag_lb = 'lexical_block'
        low_pc = match_lb.group(3)
        high_pc = match_lb.group(4)
        d_table = get_debug_table()
        low_line = d_table[low_pc]
        int_sum = int(low_pc,16) + int(high_pc)
        hex_sum = hex(int_sum)
        high_line = get_line(hex_sum[2:],d_table)
        if high_line < low_line:
            high_line = get_prev_line(hex_sum[2:],d_table, low_line, high_line)

        return [lvl_lb,id_lb,tag_lb,low_line, high_line]
    if match is not None:
        if match_loc is not None:
            fname = match_loc.group(1)
        if match_loc is not None:
            #print match_decl.group(1)
            decl_line_hex = match_decl.group(1)
        lvl = match.group(1)
        id = match.group(2)
        tag = match.group(3)
        name = match.group(4)
        # case subprogram
        if(tag == 'subprogram'):
            if match_low_pc is not None and match_high_pc is not None:
                low_pc = match_low_pc.group(1)
                high_pc = match_high_pc.group(1)
                d_table = get_debug_table()
                low_line = d_table[low_pc]
                int_sum = int(low_pc,16) + int(high_pc)
                hex_sum = hex(int_sum)
                high_line = get_line(hex_sum[2:],d_table)
                return [lvl,id,tag,name,fname,int(decl_line_hex,16),low_line, high_line]
#            print 'matched subprogram: ' + name + "()"
        # case variable
#        elif(tag == 'variable'):
#            if(lvl == '1'):
#                print 'matched global variable: ' + name
#            else:
#                print 'matched variable: ' + name
#        # unknown type
#        else:
#            print 'unknown tag'
#            return None
        if decl_line_hex ==0:
            return None
        return [lvl,id,tag,name,fname, int(decl_line_hex,16)]
    return None

def insert(li, sl, line, statements):
    tag = -1
    id = -1
    sl_dict = {}
    l = []
    line_info = get_info(statements[line])
    if line_info is not None:
        id = line_info[1]
    if id != -1:
        sl_dict[id] = line_info
        # add dwarf info as dict and set as 1st element of list
        l.append(sl_dict) #l.append
        line = line + 1
        more_line_info = get_info(statements[line])
        # get tag from new info
        if more_line_info is not None:
            tag = more_line_info[0]
            name = more_line_info[1]
        while(int(tag) > sl):
            if(int(tag) == sl+1): 
                insert(l,int(tag),line,statements)
            line = line + 1
            if get_info(statements[line]) is not None:
                tag = get_info(statements[line])[0] 
    if l:   
        li.append(l)

def make_tree(statements):
    l=[1]
    line = 0
    for stmt in statements:
        info = get_info(stmt)
        tag = -1
        if info is not None:
            tag =  info[0]
        #tag = get_info(stmt)[0]
        # global variables make up nodes at depth 1
        if(int(tag)==1):
            insert(l,int(tag),line,statements)
        line = line + 1
    print "SCOPE TREE ******"
    print l
    return l

def lookup(name, line, tree):
    if(len(tree)==1):
        if(tree[0].values()[0][3] == name):
            return tree[0].values()[0][1]
        else:
            return "WHAT"
    else:
        
        flag = True
        for i in range(1,len(tree)):
            temp = tree[i]
            info = temp[0]
            vals = info.values()[0]
            if vals[2] != 'variable':
                flag = False
                r = vals[-2:]
                if (line in range(int(r[0]),int(r[1])+1)) :
                    lookup(name,line,temp)
            # else:
            #     if(vals[3]== name):
            #         return vals[1]
        #if(flag):
            # for i in range(1,len(tree)):
            #     if(tree[i][0].values()[0][3] == name):
            #         return tree[i][0].values()[0][1]



# info of the form[level, id, type, name, file,linenum]
def parse_dd(statements):
    for stmt in statements:
        #print stmt
        info = get_info(stmt)
        if info is not None:
            if info[2] == "variable":
                vars[info[1]].append(info[0])#,info[2],info[3])
                vars[info[1]].append(info[2])
                vars[info[1]].append(info[3])
                vars[info[1]].append(info[4])
                vars[info[1]].append(info[5])
            if info[2] == "subprogram":
                #sub_programs[info[1]].append(info[0],info[2],info[3])
                sub_programs[info[1]].append(info[0])#,info[2],info[3])
                sub_programs[info[1]].append(info[2])
                sub_programs[info[1]].append(info[3])
                sub_programs[info[1]].append(info[4])
                sub_programs[info[1]].append(info[5])
    # append variable to global ars if level is 1
    for var in vars:
        if vars[var][0] == '1':
            global_vars[var].append(vars[var])
    print global_vars
    print vars
    print sub_programs

def generate_html(fname):
    cmnt = False
    # get function declaration identifier
    subroutine_decl_rgx = re.compile(r'((int\s)|(void\s)|(string\s)|(double\s)|(float\s)|(char\s))(.*?)(?=\s?\()')
    # get function call identifier
    subroutine_iden_rgx = re.compile(r'^(?!(int\s)|(void\s)|(string\s)|(double\s)|(float\s)|(char\s))(.*?)(?=\s?\()')
    # var decl
    var_decl_rgx = re.compile(r'((int\s)|(string\s)|(double\s)|(float\s)|(char\s))(.*?)(=.*)?;')
    struct_decl_rgx = re.compile(r'((int\s)|(struct\s)|(char\s))(.*?)\s(.*?)(=.*)?;')
    # var ident
    #var_iden_rgx = re.compile(r'^(?!(int\s)|(string\s)|(double\s)|(float\s)|(char\s))(.*)') # need to fix, also need to add support for .h files

    var_iden_rgx = re.compile(r'([A-Za-z][A-Za-z0-9_]*)')

    r = open(fname, "r")
    w = open("HTML/"+fname[:-1]+"html", "w")
    w.write("<html><head><link rel=\"stylesheet\" href=\"http://cdn.jsdelivr.net/highlight.js/8.9.1/styles/default.min.css\"><script src=\"http://cdn.jsdelivr.net/highlight.js/8.9.1/highlight.min.js\"></script><script>hljs.initHighlightingOnLoad();</script></head><body><pre><code class=\"c\">")
    count = 1   
    for line in r:
        match_iden_subroutine = subroutine_iden_rgx.search(line)
        match_decl_subroutine = subroutine_decl_rgx.search(line)
        match_decl_variable = var_decl_rgx.search(line)
        match_iden_variable = var_iden_rgx.findall(line)
        # if brackets in c file, write associated entity for html
        if ">" in line:
            line = line.replace('>', "&gt;")
        if "<" in line:
            line = line.replace('<',"&lt;")
        if "//" in line:
            w.write(line) # lol
        if "/*" in line or cmnt is True:
            cmnt = True
            w.write(line)
        if "*/" in line:
            cmnt = False
            #w.write(line) # lol
            continue
        if match_iden_subroutine is not None: # identify subroutine
            fun_call =  match_iden_subroutine.group(7).strip()
            id = get_key_from_val('s', fun_call)
            if id is not None:
                #path = sub_programs[id][3].replace(".c",".html")
                if sub_programs[id][3].endswith(".c"):
                    path = sub_programs[id][3].replace(".c",".html")
                elif sub_programs[id][3].endswith(".h"):
                    path = sub_programs[id][3].replace(".h",".html")
                line = re.sub(r"\s"+fun_call+"", " "+"<a href=\"" + path + "#" + id +"\">" +fun_call + "</a>"+ "", line)
                #line = line.replace(fun_call,"<a href=\"" + path + "#" + id +"\">" + fun_call + "</a>")
                #w.write("<a href=\"#"+id+"\">"+line+"</a>")
        if match_decl_subroutine is not None: # declare subroutine
            fun_decl = match_decl_subroutine.group(8).strip()
            id = get_key_from_val('s', fun_decl)
            if (id is not None):
                line = re.sub(r"\s"+fun_decl+"", "<a name=\""+id+"\">" + " " + "<mark>" + fun_decl + "</mark>" + "</a>" +"", line)
            #w.write("<a name=\""+id+"\">" + line +"</a>")
        if match_decl_variable is not None: # declare variable
            #print match_decl_variable.group(7).strip()
            var_decl = match_decl_variable.group(7).strip()
           # print var_decl
            if match_iden_variable is not None:
                non_decl = match_iden_variable
            #removing multiple occurences per line of variables
            
            for iden in non_decl:
                if (iden != var_decl):
                    id = get_key_from_val('v', iden)
                    if(id is not None):
                        id = lookup(iden,count,scope_tree)
                        if vars[id][3].endswith(".c"):
                            path = vars[id][3].replace(".c",".html")
                        elif vars[id][3].endswith(".h"):
                            path = vars[id][3].replace(".h",".html")
                        line = re.sub(r"\s"+iden+"", " "+"<a href=\"" + path + "#" + id +"\">" +iden + "</a>"+"", line)
                        #line = line.replace(iden," "+"<a href=\"" + path + "#" + id +"\">" + iden + "</a>")
            id = get_key_from_val('v', var_decl)
            if(id is not None):
                line = re.sub(r"\s"+var_decl+"", "<a name=\""+id+"\">" + " " + "<mark>" + var_decl + "</mark>" + "</a>" +"", line)
                #line = line.replace(var_decl, "<a name=\""+id+"\">" + "<mark>" + var_decl + "</mark>" + "</a>")
        elif match_iden_variable is not None: # identify variable
            match_iden_variable = list(set(match_iden_variable))
            for iden in match_iden_variable:
                id = get_key_from_val('v', iden)
                if(id is not None):
                        #print iden
                        print count
                        id2 = lookup(iden,count,scope_tree)
                        print id2
                        if vars[id][3].endswith(".c"):
                            path = vars[id][3].replace(".c",".html")
                        elif vars[id][3].endswith(".h"):
                            path = vars[id][3].replace(".h",".html")
                        line = re.sub(r'(?<![A-Za-z0-9_\\])'+iden+r'(?![A-Za-z0-9_])', "<a href=\"" + path + "#" + id +"\">" +iden + "</a>"+"", line)
                        #line = line.replace(iden,"<a href=\"" + path + "#" + id +"\">" + iden + "</a>")


            #id = get_key_from_val('v', var_decl)
            #path = vars[id][3].replace(".c",".html")
            #line = line.replace(var_decl,"<a name=\"" + path + "#"+id+"\">" + var_decl + "</a>")
        else:
            print("error")
        w.write(line)
        count = count + 1
    w.write("</code></pre></body></html>")
    r.close()
    w.close()

def generate_index():
    now = datetime.datetime.now()
    index = open("HTML/index.html","w")
    index.write("<html><head><title>cross indexer index</title></head><body><h2>Cross Indexer INDEX</h2>")
    main_file_key = get_key_from_val('s',"main")
    main_file = sub_programs[main_file_key][3]
    index.write("<a href=\"" +  main_file.replace(".c",".html")  + "\">"+"Link to main()"+"</a>")
    index.write("<p>")
    # get all files
    for file in os.listdir("."):
        if file.endswith(".c") or file.endswith(".h"):
            if file.endswith(".c"):
                index.write("<a href=\"" + file.replace(".c",".html")  + "\">"+file+"</a>")
            elif file.endswith(".h"):
                index.write("<a href=\"" + file.replace(".h",".html")  + "\">"+file+"</a>")
            index.write("<p>")

    #for file in os.listdir("./HTML"):
    #    if file.endswith(".html") and file != "index.html": 
    #        index.write("<a href=\"" + file  + "\">"+file.replace(".html",".c")+"</a>")
    #        index.write("<p>")
    index.write("xref last run on: " + str(now))
    index.write("<br>")
    index.write("at: " + os.path.dirname(os.path.abspath(__file__)))
    index.write("</body></html>")
    index.close()

def get_key_from_val(type, name):
    if type == 's':
        for key, val in sub_programs.iteritems():
            if name in val:
                return key
    elif type == 'v':
        for key, val in vars.iteritems():
            if name in val:
                return key

def main():
    # generate HTML directory
    global bin
    create_directory("HTML")
    bin = str(sys.argv[1])
    # save DD to log
    f = open(log, "w")
    call("~cs254/bin/dwarfdump -di " + bin, shell=True, stdout = f)
    f.close()
    # array of dd statements
    with open(log) as f:
        statements = f.readlines()
    parse_dd(statements)
    global scope_tree
    scope_tree = make_tree(statements) # need parameter to avoid global variable problem
    #print lookup('d',26,scope_tree)
    for file in os.listdir("."):
        if file.endswith(".c") or file.endswith(".h"):
            generate_html(str(file)) 
    #generate_html("fib.c")
    generate_index()
main()
